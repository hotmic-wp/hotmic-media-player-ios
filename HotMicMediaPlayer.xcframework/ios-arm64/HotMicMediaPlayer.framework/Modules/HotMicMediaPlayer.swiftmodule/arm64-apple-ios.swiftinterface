// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name HotMicMediaPlayer
import AVFoundation
import AudioToolbox
import BitmovinPlayer
import FittedSheets
import Foundation
@_exported import HotMicMediaPlayer
import Kingfisher
import MediaPlayer
import OpenTok
import PubNub
import SafariServices
import ShipBookSDK
import StoreKit
import Swift
import TrueTime
import UIKit
import WebKit
import _Concurrency
public protocol HMPlayerViewControllerDelegate : AnyObject {
  func playerViewController(_ viewController: HotMicMediaPlayer.HMPlayerViewController, didFinishWith pipView: UIKit.UIView?)
  func playerViewController(_ viewController: HotMicMediaPlayer.HMPlayerViewController, userDidTapAd id: Swift.String, streamID: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class HMPlayerViewController : UIKit.UIViewController, UIKit.UIViewControllerTransitioningDelegate {
  @_Concurrency.MainActor(unsafe) @objc override final public var prefersStatusBarHidden: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var preferredStatusBarUpdateAnimation: UIKit.UIStatusBarAnimation {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var prefersHomeIndicatorAutoHidden: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var shouldAutorotate: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override final public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc deinit
  @_Concurrency.MainActor(unsafe) final public func restorePiPView(_ pipView: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension HotMicMediaPlayer.HMPlayerViewController : UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension HotMicMediaPlayer.HMPlayerViewController : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
}
extension HotMicMediaPlayer.HMPlayerViewController : UIKit.UIPageViewControllerDataSource, UIKit.UIPageViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerBefore viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) @objc final public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerAfter viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) @objc final public func pageViewController(_ pageViewController: UIKit.UIPageViewController, didFinishAnimating finished: Swift.Bool, previousViewControllers: [UIKit.UIViewController], transitionCompleted completed: Swift.Bool)
}
extension HotMicMediaPlayer.HMPlayerViewController : OpenTok.OTSessionDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func sessionDidConnect(_ session: OpenTok.OTSession)
  @_Concurrency.MainActor(unsafe) @objc final public func sessionDidDisconnect(_ session: OpenTok.OTSession)
  @_Concurrency.MainActor(unsafe) @objc final public func session(_ session: OpenTok.OTSession, didFailWithError error: OpenTok.OTError)
  @_Concurrency.MainActor(unsafe) @objc final public func session(_ session: OpenTok.OTSession, streamCreated stream: OpenTok.OTStream)
  @_Concurrency.MainActor(unsafe) @objc final public func session(_ session: OpenTok.OTSession, streamDestroyed stream: OpenTok.OTStream)
}
extension HotMicMediaPlayer.HMPlayerViewController : OpenTok.OTPublisherDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func publisher(_ publisher: OpenTok.OTPublisherKit, didFailWithError error: OpenTok.OTError)
  @_Concurrency.MainActor(unsafe) @objc final public func publisher(_ publisher: OpenTok.OTPublisherKit, streamCreated stream: OpenTok.OTStream)
  @_Concurrency.MainActor(unsafe) @objc final public func publisher(_ publisher: OpenTok.OTPublisherKit, streamDestroyed stream: OpenTok.OTStream)
}
extension HotMicMediaPlayer.HMPlayerViewController : OpenTok.OTSubscriberDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func subscriberDidConnect(toStream subscriber: OpenTok.OTSubscriberKit)
  @_Concurrency.MainActor(unsafe) @objc final public func subscriberDidDisconnect(fromStream subscriber: OpenTok.OTSubscriberKit)
  @_Concurrency.MainActor(unsafe) @objc final public func subscriber(_ subscriber: OpenTok.OTSubscriberKit, didFailWithError error: OpenTok.OTError)
  @_Concurrency.MainActor(unsafe) @objc final public func subscriberVideoEnabled(_ subscriber: OpenTok.OTSubscriberKit, reason: OpenTok.OTSubscriberVideoEventReason)
  @_Concurrency.MainActor(unsafe) @objc final public func subscriberVideoDisabled(_ subscriber: OpenTok.OTSubscriberKit, reason: OpenTok.OTSubscriberVideoEventReason)
}
extension HotMicMediaPlayer.HMPlayerViewController : OpenTok.OTSubscriberKitAudioLevelDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func subscriber(_ subscriber: OpenTok.OTSubscriberKit, audioLevelUpdated audioLevel: Swift.Float)
}
@propertyWrapper public struct Lenient<T> : Swift.Codable where T : Swift.Decodable, T : Swift.Encodable {
  public init(wrappedValue: T?)
  public var wrappedValue: T? {
    get
    set
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension HotMicMediaPlayer.Lenient : Swift.Equatable where T : Swift.Equatable {
  public static func == (a: HotMicMediaPlayer.Lenient<T>, b: HotMicMediaPlayer.Lenient<T>) -> Swift.Bool
}
extension HotMicMediaPlayer.Lenient : Swift.Hashable where T : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Swift.KeyedDecodingContainer {
  public func decode<T>(_ type: HotMicMediaPlayer.Lenient<T>.Type, forKey key: Swift.KeyedDecodingContainer<K>.Key) throws -> HotMicMediaPlayer.Lenient<T> where T : Swift.Decodable, T : Swift.Encodable
}
extension Swift.KeyedEncodingContainer {
  public mutating func encode<T>(_ lenient: HotMicMediaPlayer.Lenient<T>, forKey key: Swift.KeyedEncodingContainer<K>.Key) throws where T : Swift.Decodable, T : Swift.Encodable
}
public enum HMTextStyle {
  case title1
  case headline
  case body
  case callout
  case caption1
  case caption2
  public static func == (a: HotMicMediaPlayer.HMTextStyle, b: HotMicMediaPlayer.HMTextStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum HMColorStyle {
  case primary
  case secondary
  case tertiary
  case primaryTint
  case secondaryTint
  case tertiaryTint
  case warningTint
  case errorTint
  case successTint
  case liveTint
  case separator
  case highlight
  case primaryBackground
  case secondaryBackground
  case tertiaryBackground
  public static func == (a: HotMicMediaPlayer.HMColorStyle, b: HotMicMediaPlayer.HMColorStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol HMMediaPlayerAppearanceDelegate : AnyObject {
  func customFont(for textStyle: HotMicMediaPlayer.HMTextStyle) -> UIKit.UIFont?
  func customColor(for colorStyle: HotMicMediaPlayer.HMColorStyle) -> UIKit.UIColor?
}
public protocol HMMediaPlayerShareDelegate : AnyObject {
  func getStreamShareText(streamID: Swift.String, completion: @escaping (Swift.Result<Swift.String?, Swift.Error>) -> Swift.Void)
}
public protocol HMMediaPlayerUserProfileDelegate : AnyObject {
  func getIsFollowingUser(userID: Swift.String, completion: @escaping (Swift.Result<Swift.Bool?, Swift.Error>) -> Swift.Void)
  func followOrUnfollowUser(userID: Swift.String, follow: Swift.Bool, completion: @escaping (Swift.Error?) -> Swift.Void)
}
public protocol HMMediaPlayerInAppPurchaseDelegate : AnyObject {
  func getTipProducts(hostID: Swift.String, completion: @escaping (Swift.Result<[StoreKit.SKProduct], Swift.Error>) -> Swift.Void)
  func getJoinStreamProduct(hostID: Swift.String, userID: Swift.String, completion: @escaping (Swift.Result<StoreKit.SKProduct?, Swift.Error>) -> Swift.Void)
  func purchaseTip(product: StoreKit.SKProduct, userID: Swift.String, hostID: Swift.String, streamID: Swift.String, message: Swift.String?, anonymous: Swift.Bool, completion: @escaping ((error: Swift.Error?, showError: Swift.Bool, canRetry: Swift.Bool)) -> Swift.Void)
  func purchaseJoinStream(product: StoreKit.SKProduct, userID: Swift.String, streamID: Swift.String, streamType: Swift.String, completion: @escaping ((error: Swift.Error?, showError: Swift.Bool, canRetry: Swift.Bool)) -> Swift.Void)
  func retrySubmittingPurchaseInfo(productID: Swift.String, completion: @escaping ((error: Swift.Error?, showError: Swift.Bool, canRetry: Swift.Bool)) -> Swift.Void)
}
public protocol HMMediaPlayerAuthenticationObserving : AnyObject {
  func authenticationStatusChangedToUnauthenticated()
}
public protocol HMMediaPlayerAnalyticsEventObserving : AnyObject {
  func eventStarted(name: Swift.String)
  func eventOccurred(name: Swift.String, info: [Swift.String : Any])
}
@_hasMissingDesignatedInitializers public class HMMediaPlayer {
  weak public static var appearanceDelegate: HotMicMediaPlayer.HMMediaPlayerAppearanceDelegate?
  weak public static var shareDelegate: HotMicMediaPlayer.HMMediaPlayerShareDelegate?
  weak public static var userProfileDelegate: HotMicMediaPlayer.HMMediaPlayerUserProfileDelegate?
  weak public static var inAppPurchaseDelegate: HotMicMediaPlayer.HMMediaPlayerInAppPurchaseDelegate?
  weak public static var authenticationObserver: HotMicMediaPlayer.HMMediaPlayerAuthenticationObserving?
  weak public static var analyticsObserver: HotMicMediaPlayer.HMMediaPlayerAnalyticsEventObserving?
  public static var debugKey: Swift.String
  public static func initialize(apiKey: Swift.String, accessToken: Swift.String)
  public static func initializePlayerViewController(streamID: Swift.String, delegate: HotMicMediaPlayer.HMPlayerViewControllerDelegate?, supportsMinimizingToPiP: Swift.Bool = false) -> HotMicMediaPlayer.HMPlayerViewController
  public static func getStreams(live: Swift.Bool, scheduled: Swift.Bool, vod: Swift.Bool, userID: Swift.String? = nil, limit: Swift.Int? = nil, skip: Swift.Int? = nil, completion: @escaping (Swift.Result<[HotMicMediaPlayer.HMStream], Swift.Error>) -> Swift.Void)
  public static func submitTipPurchase(userID: Swift.String, hostID: Swift.String, streamID: Swift.String, message: Swift.String?, anonymous: Swift.Bool, productID: Swift.String, transactionID: Swift.String, transactionDate: Foundation.TimeInterval, price: Foundation.Decimal, localeID: Swift.String, currencyCode: Swift.String?, regionCode: Swift.String?, receipt: Swift.String, completion: @escaping ((requestSuccess: Swift.Bool, validated: Swift.Bool, retry: Swift.Bool, error: Swift.Error?)) -> Swift.Void)
  public static func submitJoinStreamPurchase(userID: Swift.String, streamID: Swift.String, productID: Swift.String, transactionID: Swift.String, transactionDate: Foundation.TimeInterval, price: Foundation.Decimal, localeID: Swift.String, currencyCode: Swift.String?, regionCode: Swift.String?, receipt: Swift.String, completion: @escaping ((requestSuccess: Swift.Bool, validated: Swift.Bool, retry: Swift.Bool, error: Swift.Error?)) -> Swift.Void)
  @objc deinit
}
public struct HMStream : Swift.Decodable, Swift.Equatable {
  public let id: Swift.String
  public var state: HotMicMediaPlayer.HMStream.StreamState
  public let type: HotMicMediaPlayer.HMStream.StreamType
  @HotMicMediaPlayer.Lenient public var thumbnail: Foundation.URL? {
    get
    set
    _modify
  }
  public let title: Swift.String
  public let channel: Swift.String?
  public let user: HotMicMediaPlayer.HMStream.User
  public let canParticipate: Swift.Bool?
  public var viewers: Swift.Int?
  public var visitors: Swift.Int?
  public var duration: Foundation.TimeInterval?
  public let scheduledDate: Foundation.Date?
  public var liveDate: Foundation.Date?
  public var featuredAttendees: [Swift.String]?
  public enum StreamState : Swift.String, Swift.Decodable {
    case scheduled
    case live
    case vod
    case ended
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum StreamType : Swift.String, Swift.Decodable {
    case broadcast
    case watchParty
    case audioRoom
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct User : Swift.Decodable, Swift.Equatable {
    public let id: Swift.String
    public let displayName: Swift.String?
    @HotMicMediaPlayer.Lenient public var profilePic: Foundation.URL? {
      get
      set
      _modify
    }
    @HotMicMediaPlayer.Lenient public var badge: Foundation.URL? {
      get
      set
      _modify
    }
    public let followers: Swift.Int?
    public static func == (lhs: HotMicMediaPlayer.HMStream.User, rhs: HotMicMediaPlayer.HMStream.User) -> Swift.Bool
    public init(from decoder: Swift.Decoder) throws
  }
  public static func == (lhs: HotMicMediaPlayer.HMStream, rhs: HotMicMediaPlayer.HMStream) -> Swift.Bool
  public init(from decoder: Swift.Decoder) throws
}
extension HotMicMediaPlayer.HMTextStyle : Swift.Equatable {}
extension HotMicMediaPlayer.HMTextStyle : Swift.Hashable {}
extension HotMicMediaPlayer.HMColorStyle : Swift.Equatable {}
extension HotMicMediaPlayer.HMColorStyle : Swift.Hashable {}
extension HotMicMediaPlayer.HMStream.StreamState : Swift.Equatable {}
extension HotMicMediaPlayer.HMStream.StreamState : Swift.Hashable {}
extension HotMicMediaPlayer.HMStream.StreamState : Swift.RawRepresentable {}
extension HotMicMediaPlayer.HMStream.StreamType : Swift.Equatable {}
extension HotMicMediaPlayer.HMStream.StreamType : Swift.Hashable {}
extension HotMicMediaPlayer.HMStream.StreamType : Swift.RawRepresentable {}
