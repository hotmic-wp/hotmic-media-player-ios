// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name HotMicMediaPlayer
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import AudioToolbox
import BitmovinPlayer
import FittedSheets
import Foundation
@_exported import HotMicMediaPlayer
import Kingfisher
import MediaPlayer
import OpenTok
import PubNub
import SafariServices
import StoreKit
import Swift
import TrueTime
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
public protocol HMPlayerViewControllerDelegate : AnyObject {
  func playerViewController(_ viewController: HotMicMediaPlayer.HMPlayerViewController, playerForAssetAt url: Foundation.URL) -> HotMicMediaPlayer.HMPlayer?
  func playerViewController(_ viewController: HotMicMediaPlayer.HMPlayerViewController, didFinishWith pipView: UIKit.UIView?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class HMPlayerViewController : UIKit.UIViewController, UIKit.UIViewControllerTransitioningDelegate {
  @_Concurrency.MainActor(unsafe) @objc override final public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var preferredStatusBarUpdateAnimation: UIKit.UIStatusBarAnimation {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var prefersHomeIndicatorAutoHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override final public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc deinit
  @_Concurrency.MainActor(unsafe) final public func restorePiPView(_ pipView: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) final public func displayBannerAd(withView view: UIKit.UIView, duration: Foundation.TimeInterval? = nil, delay: Foundation.TimeInterval = 0, animationDuration: Foundation.TimeInterval = 0.333)
  @_Concurrency.MainActor(unsafe) final public func hideBannerAd(animationDuration: Foundation.TimeInterval = 0.333)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension HotMicMediaPlayer.HMPlayerViewController : UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension HotMicMediaPlayer.HMPlayerViewController : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
}
extension HotMicMediaPlayer.HMPlayerViewController : UIKit.UIPageViewControllerDataSource, UIKit.UIPageViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerBefore viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) @objc final public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerAfter viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) @objc final public func pageViewController(_ pageViewController: UIKit.UIPageViewController, didFinishAnimating finished: Swift.Bool, previousViewControllers: [UIKit.UIViewController], transitionCompleted completed: Swift.Bool)
}
extension HotMicMediaPlayer.HMPlayerViewController : HotMicMediaPlayer.HMPlayerDelegate {
  @_Concurrency.MainActor(unsafe) final public func playerDidInvokePlay(_ player: HotMicMediaPlayer.HMPlayer)
  @_Concurrency.MainActor(unsafe) final public func playerPlaying(_ player: HotMicMediaPlayer.HMPlayer)
  @_Concurrency.MainActor(unsafe) final public func playerPaused(_ player: HotMicMediaPlayer.HMPlayer)
  @_Concurrency.MainActor(unsafe) final public func playerBuffering(_ player: HotMicMediaPlayer.HMPlayer)
  @_Concurrency.MainActor(unsafe) final public func playerDidFinishSeekByTimeShift(_ player: HotMicMediaPlayer.HMPlayer)
  @_Concurrency.MainActor(unsafe) final public func playerDidRecoverFromStall(_ player: HotMicMediaPlayer.HMPlayer)
  @_Concurrency.MainActor(unsafe) final public func player(_ player: HotMicMediaPlayer.HMPlayer, timeChanged time: Foundation.TimeInterval)
  @_Concurrency.MainActor(unsafe) final public func player(_ player: HotMicMediaPlayer.HMPlayer, durationChanged duration: Foundation.TimeInterval)
  @_Concurrency.MainActor(unsafe) final public func player(_ player: HotMicMediaPlayer.HMPlayer, errorOccurredWithCode code: Swift.String, message: Swift.String)
}
extension HotMicMediaPlayer.HMPlayerViewController : OpenTok.OTSessionDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func sessionDidConnect(_ session: OpenTok.OTSession)
  @_Concurrency.MainActor(unsafe) @objc final public func sessionDidDisconnect(_ session: OpenTok.OTSession)
  @_Concurrency.MainActor(unsafe) @objc final public func session(_ session: OpenTok.OTSession, didFailWithError error: OpenTok.OTError)
  @_Concurrency.MainActor(unsafe) @objc final public func session(_ session: OpenTok.OTSession, streamCreated stream: OpenTok.OTStream)
  @_Concurrency.MainActor(unsafe) @objc final public func session(_ session: OpenTok.OTSession, streamDestroyed stream: OpenTok.OTStream)
}
extension HotMicMediaPlayer.HMPlayerViewController : OpenTok.OTPublisherDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func publisher(_ publisher: OpenTok.OTPublisherKit, didFailWithError error: OpenTok.OTError)
  @_Concurrency.MainActor(unsafe) @objc final public func publisher(_ publisher: OpenTok.OTPublisherKit, streamCreated stream: OpenTok.OTStream)
  @_Concurrency.MainActor(unsafe) @objc final public func publisher(_ publisher: OpenTok.OTPublisherKit, streamDestroyed stream: OpenTok.OTStream)
}
extension HotMicMediaPlayer.HMPlayerViewController : OpenTok.OTSubscriberDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func subscriberDidConnect(toStream subscriber: OpenTok.OTSubscriberKit)
  @_Concurrency.MainActor(unsafe) @objc final public func subscriberDidDisconnect(fromStream subscriber: OpenTok.OTSubscriberKit)
  @_Concurrency.MainActor(unsafe) @objc final public func subscriber(_ subscriber: OpenTok.OTSubscriberKit, didFailWithError error: OpenTok.OTError)
  @_Concurrency.MainActor(unsafe) @objc final public func subscriberVideoEnabled(_ subscriber: OpenTok.OTSubscriberKit, reason: OpenTok.OTSubscriberVideoEventReason)
  @_Concurrency.MainActor(unsafe) @objc final public func subscriberVideoDisabled(_ subscriber: OpenTok.OTSubscriberKit, reason: OpenTok.OTSubscriberVideoEventReason)
}
extension HotMicMediaPlayer.HMPlayerViewController : OpenTok.OTSubscriberKitAudioLevelDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func subscriber(_ subscriber: OpenTok.OTSubscriberKit, audioLevelUpdated audioLevel: Swift.Float)
}
@propertyWrapper public struct Lenient<T> : Swift.Codable where T : Swift.Decodable, T : Swift.Encodable {
  public init(wrappedValue: T?)
  public var wrappedValue: T? {
    get
    set
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension HotMicMediaPlayer.Lenient : Swift.Equatable where T : Swift.Equatable {
  public static func == (a: HotMicMediaPlayer.Lenient<T>, b: HotMicMediaPlayer.Lenient<T>) -> Swift.Bool
}
extension HotMicMediaPlayer.Lenient : Swift.Hashable where T : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Swift.KeyedDecodingContainer {
  public func decode<T>(_ type: HotMicMediaPlayer.Lenient<T>.Type, forKey key: Swift.KeyedDecodingContainer<K>.Key) throws -> HotMicMediaPlayer.Lenient<T> where T : Swift.Decodable, T : Swift.Encodable
}
extension Swift.KeyedEncodingContainer {
  public mutating func encode<T>(_ lenient: HotMicMediaPlayer.Lenient<T>, forKey key: Swift.KeyedEncodingContainer<K>.Key) throws where T : Swift.Decodable, T : Swift.Encodable
}
public enum HMTextStyle {
  case largeTitle
  case title1
  case title2
  case title3
  case headline
  case body
  case highlightedBody
  case callout
  case subheadline
  case footnote
  case caption1
  case highlightedCaption1
  case caption2
  public static func == (a: HotMicMediaPlayer.HMTextStyle, b: HotMicMediaPlayer.HMTextStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum HMColorStyle {
  case primary
  case secondary
  case tertiary
  case primaryTint
  case secondaryTint
  case tertiaryTint
  case primaryTintContent
  case secondaryTintContent
  case tertiaryTintContent
  case warningTint
  case errorTint
  case successTint
  case liveTint
  case separator
  case highlightedFill
  case selectedFill
  case selectedPollAnswerFill
  case primaryBackground
  case secondaryBackground
  case tertiaryBackground
  public static func == (a: HotMicMediaPlayer.HMColorStyle, b: HotMicMediaPlayer.HMColorStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum HMImageType {
  case joinButton
  case syncButton
  public static func == (a: HotMicMediaPlayer.HMImageType, b: HotMicMediaPlayer.HMImageType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum HMRestrictedAction {
  case sendTip
  case sendChat
  case sendChatReaction
  case followUser
  case viewUserProfile
  public static func == (a: HotMicMediaPlayer.HMRestrictedAction, b: HotMicMediaPlayer.HMRestrictedAction) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum HMPlayerLiveTimeShiftError {
  case tooFarBehind
  case tooFarAhead
  public static func == (a: HotMicMediaPlayer.HMPlayerLiveTimeShiftError, b: HotMicMediaPlayer.HMPlayerLiveTimeShiftError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol HMMediaPlayerAppearanceDelegate : AnyObject {
  func customFont(for textStyle: HotMicMediaPlayer.HMTextStyle) -> UIKit.UIFont?
  func customColor(for colorStyle: HotMicMediaPlayer.HMColorStyle) -> UIKit.UIColor?
  func customImage(for imageType: HotMicMediaPlayer.HMImageType) -> UIKit.UIImage?
}
public protocol HMPlayer : AnyObject {
  var view: UIKit.UIView { get }
  var isPlaying: Swift.Bool { get }
  var isPaused: Swift.Bool { get }
  var isSeeking: Swift.Bool { get }
  var isMuted: Swift.Bool { get }
  var volume: Swift.Int { get }
  var duration: Foundation.TimeInterval { get }
  var time: Foundation.TimeInterval { get }
  var playbackSpeed: Swift.Float { get }
  func setDelegate(_ delegate: HotMicMediaPlayer.HMPlayerDelegate)
  func play()
  func pause()
  func mute()
  func unmute()
  func updateVolume(_ volume: Swift.Int)
  func seek(to time: Foundation.TimeInterval)
  @discardableResult
  func seek(by timeShiftOffset: Foundation.TimeInterval) -> HotMicMediaPlayer.HMPlayerLiveTimeShiftError?
  func seekToLive()
  func updatePlaybackSpeed(_ playbackSpeed: Swift.Float)
  func beginRotation()
  func endRotation()
  func enterFullscreen()
  func exitFullscreen()
}
public protocol HMPlayerDelegate : AnyObject {
  func playerDidInvokePlay(_ player: HotMicMediaPlayer.HMPlayer)
  func playerPlaying(_ player: HotMicMediaPlayer.HMPlayer)
  func playerPaused(_ player: HotMicMediaPlayer.HMPlayer)
  func playerBuffering(_ player: HotMicMediaPlayer.HMPlayer)
  func playerDidFinishSeekByTimeShift(_ player: HotMicMediaPlayer.HMPlayer)
  func playerDidRecoverFromStall(_ player: HotMicMediaPlayer.HMPlayer)
  func player(_ player: HotMicMediaPlayer.HMPlayer, timeChanged time: Foundation.TimeInterval)
  func player(_ player: HotMicMediaPlayer.HMPlayer, durationChanged duration: Foundation.TimeInterval)
  func player(_ player: HotMicMediaPlayer.HMPlayer, errorOccurredWithCode code: Swift.String, message: Swift.String)
}
public protocol HMMediaPlayerShareDelegate : AnyObject {
  func getStreamShareText(streamID: Swift.String, completion: @escaping (Swift.Result<Swift.String?, Swift.Error>) -> Swift.Void)
}
public protocol HMMediaPlayerUserProfileDelegate : AnyObject {
  func getUserProfile(for id: Swift.String, restriction: Swift.String?, isHost: Swift.Bool, isCohost: Swift.Bool, completion: @escaping (Swift.Result<HotMicMediaPlayer.HMUserProfile?, Swift.Error>) -> Swift.Void)
  func setFollowingUser(for id: Swift.String, restriction: Swift.String?, isHost: Swift.Bool, isCohost: Swift.Bool, following: Swift.Bool, completion: @escaping (Swift.Error?) -> Swift.Void)
  func shouldShowSeeFullProfileButton(for id: Swift.String, restriction: Swift.String?, isHost: Swift.Bool, isCohost: Swift.Bool) -> Swift.Bool
  func seeFullProfileButtonTapped(for id: Swift.String, restriction: Swift.String?, isHost: Swift.Bool, isCohost: Swift.Bool, in viewController: UIKit.UIViewController)
}
public protocol HMMediaPlayerInAppPurchaseDelegate : AnyObject {
  func getTipProducts(hostID: Swift.String, completion: @escaping (Swift.Result<[StoreKit.SKProduct], Swift.Error>) -> Swift.Void)
  func getJoinStreamProduct(hostID: Swift.String, userID: Swift.String, completion: @escaping (Swift.Result<StoreKit.SKProduct?, Swift.Error>) -> Swift.Void)
  func purchaseTip(product: StoreKit.SKProduct, userID: Swift.String, hostID: Swift.String, streamID: Swift.String, message: Swift.String?, anonymous: Swift.Bool, completion: @escaping ((error: Swift.Error?, showError: Swift.Bool, canRetry: Swift.Bool)) -> Swift.Void)
  func purchaseJoinStream(product: StoreKit.SKProduct, userID: Swift.String, streamID: Swift.String, streamType: Swift.String, completion: @escaping ((error: Swift.Error?, showError: Swift.Bool, canRetry: Swift.Bool)) -> Swift.Void)
  func retrySubmittingPurchaseInfo(productID: Swift.String, completion: @escaping ((error: Swift.Error?, showError: Swift.Bool, canRetry: Swift.Bool)) -> Swift.Void)
}
public protocol HMMediaPlayerAuthenticationObserving : AnyObject {
  func authenticationStatusChangedToUnauthenticated()
  func userDidAttemptRestrictedAction(_ action: HotMicMediaPlayer.HMRestrictedAction, in viewController: UIKit.UIViewController) -> Swift.Bool
}
public protocol HMMediaPlayerAnalyticsEventObserving : AnyObject {
  func eventStarted(name: Swift.String)
  func eventOccurred(name: Swift.String, info: [Swift.String : Any])
}
@_hasMissingDesignatedInitializers public class HMMediaPlayer {
  weak public static var appearanceDelegate: HotMicMediaPlayer.HMMediaPlayerAppearanceDelegate?
  weak public static var shareDelegate: HotMicMediaPlayer.HMMediaPlayerShareDelegate?
  weak public static var userProfileDelegate: HotMicMediaPlayer.HMMediaPlayerUserProfileDelegate?
  weak public static var inAppPurchaseDelegate: HotMicMediaPlayer.HMMediaPlayerInAppPurchaseDelegate?
  weak public static var authenticationObserver: HotMicMediaPlayer.HMMediaPlayerAuthenticationObserving?
  weak public static var analyticsObserver: HotMicMediaPlayer.HMMediaPlayerAnalyticsEventObserving?
  public static var debugKey: Swift.String
  public static func initialize(apiKey: Swift.String, accessToken: Swift.String)
  public static func initializePlayerViewController(streamID: Swift.String, delegate: HotMicMediaPlayer.HMPlayerViewControllerDelegate?, supportsMinimizingToPiP: Swift.Bool = false) -> HotMicMediaPlayer.HMPlayerViewController
  public static func getStreams(live: Swift.Bool, scheduled: Swift.Bool, vod: Swift.Bool, userID: Swift.String? = nil, limit: Swift.Int? = nil, skip: Swift.Int? = nil, completion: @escaping (Swift.Result<[HotMicMediaPlayer.HMStream], Swift.Error>) -> Swift.Void)
  public static func getStream(id: Swift.String, completion: @escaping (Swift.Result<HotMicMediaPlayer.HMStream, Swift.Error>) -> Swift.Void)
  public static func submitTipPurchase(userID: Swift.String, hostID: Swift.String, streamID: Swift.String, message: Swift.String?, anonymous: Swift.Bool, productID: Swift.String, transactionID: Swift.String, transactionDate: Foundation.TimeInterval, price: Foundation.Decimal, localeID: Swift.String, currencyCode: Swift.String?, regionCode: Swift.String?, receipt: Swift.String, completion: @escaping ((requestSuccess: Swift.Bool, validated: Swift.Bool, retry: Swift.Bool, error: Swift.Error?)) -> Swift.Void)
  public static func submitJoinStreamPurchase(userID: Swift.String, streamID: Swift.String, productID: Swift.String, transactionID: Swift.String, transactionDate: Foundation.TimeInterval, price: Foundation.Decimal, localeID: Swift.String, currencyCode: Swift.String?, regionCode: Swift.String?, receipt: Swift.String, completion: @escaping ((requestSuccess: Swift.Bool, validated: Swift.Bool, retry: Swift.Bool, error: Swift.Error?)) -> Swift.Void)
  @objc deinit
}
public struct HMStream : Swift.Decodable, Swift.Equatable {
  public let id: Swift.String
  public var state: HotMicMediaPlayer.HMStream.StreamState
  public let type: HotMicMediaPlayer.HMStream.StreamType
  @HotMicMediaPlayer.Lenient public var thumbnail: Foundation.URL? {
    get
    set
    _modify
  }
  public let title: Swift.String
  public let description: Swift.String?
  public let tags: [Swift.String]?
  public let channel: Swift.String?
  public let user: HotMicMediaPlayer.HMStream.User
  public let canParticipate: Swift.Bool?
  public var viewers: Swift.Int?
  public var visitors: Swift.Int?
  public var duration: Foundation.TimeInterval?
  public let scheduledDate: Foundation.Date?
  public var liveDate: Foundation.Date?
  public var featuredAttendees: [Swift.String]?
  @HotMicMediaPlayer.Lenient public var videoURL: Foundation.URL? {
    get
    set
    _modify
  }
  public enum StreamState : Swift.String, Swift.Decodable {
    case scheduled
    case live
    case vod
    case ended
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum StreamType : Swift.String, Swift.Decodable {
    case broadcast
    case audioRoom
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct User : Swift.Decodable, Swift.Equatable {
    public let id: Swift.String
    public let displayName: Swift.String?
    @HotMicMediaPlayer.Lenient public var profilePic: Foundation.URL? {
      get
      set
      _modify
    }
    @HotMicMediaPlayer.Lenient public var badge: Foundation.URL? {
      get
      set
      _modify
    }
    public static func == (lhs: HotMicMediaPlayer.HMStream.User, rhs: HotMicMediaPlayer.HMStream.User) -> Swift.Bool
    public init(from decoder: Swift.Decoder) throws
  }
  public static func == (lhs: HotMicMediaPlayer.HMStream, rhs: HotMicMediaPlayer.HMStream) -> Swift.Bool
  public init(from decoder: Swift.Decoder) throws
}
public struct HMUserProfile {
  public let name: Swift.String?
  public let displayName: Swift.String?
  public let profilePic: Foundation.URL?
  public let badge: Foundation.URL?
  public let bio: Swift.String?
  public let instagramHandle: Swift.String?
  public let tikTokHandle: Swift.String?
  public let twitchHandle: Swift.String?
  public let twitterHandle: Swift.String?
  public let youTubeHandle: Swift.String?
  public let followersCount: Swift.Int?
  public let followingCount: Swift.Int?
  public let followingMe: Swift.Bool?
  public var followedByMe: Swift.Bool?
  public init(name: Swift.String? = nil, displayName: Swift.String? = nil, profilePic: Foundation.URL? = nil, badge: Foundation.URL? = nil, bio: Swift.String? = nil, instagramHandle: Swift.String? = nil, tikTokHandle: Swift.String? = nil, twitchHandle: Swift.String? = nil, twitterHandle: Swift.String? = nil, youTubeHandle: Swift.String? = nil, followersCount: Swift.Int? = nil, followingCount: Swift.Int? = nil, followingMe: Swift.Bool? = nil, followedByMe: Swift.Bool? = nil)
}
extension HotMicMediaPlayer.HMTextStyle : Swift.Equatable {}
extension HotMicMediaPlayer.HMTextStyle : Swift.Hashable {}
extension HotMicMediaPlayer.HMColorStyle : Swift.Equatable {}
extension HotMicMediaPlayer.HMColorStyle : Swift.Hashable {}
extension HotMicMediaPlayer.HMImageType : Swift.Equatable {}
extension HotMicMediaPlayer.HMImageType : Swift.Hashable {}
extension HotMicMediaPlayer.HMRestrictedAction : Swift.Equatable {}
extension HotMicMediaPlayer.HMRestrictedAction : Swift.Hashable {}
extension HotMicMediaPlayer.HMPlayerLiveTimeShiftError : Swift.Equatable {}
extension HotMicMediaPlayer.HMPlayerLiveTimeShiftError : Swift.Hashable {}
extension HotMicMediaPlayer.HMStream.StreamState : Swift.Equatable {}
extension HotMicMediaPlayer.HMStream.StreamState : Swift.Hashable {}
extension HotMicMediaPlayer.HMStream.StreamState : Swift.RawRepresentable {}
extension HotMicMediaPlayer.HMStream.StreamType : Swift.Equatable {}
extension HotMicMediaPlayer.HMStream.StreamType : Swift.Hashable {}
extension HotMicMediaPlayer.HMStream.StreamType : Swift.RawRepresentable {}
